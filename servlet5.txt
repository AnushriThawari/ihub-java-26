Form Validation
===============
The process of checking format and pattern of form data is called form validation and such logic is called form validation logic.

There are two ways to perform form validation.

1)Client side form validation
--------------------------
A validation which is performed at client side is called client side form validation.

To perform client side form validation we need to use javascript.


2)Server side form validation 
----------------------------
A validation which is performed at server side is called server side form validation.

To perform server side form validation we need to use java,php,.net,python and etc.

Deployment Directory structure
-----------------------------
ValidationApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---TestSrv.java
|---Web Content
	|
	|------form.html
	|------validation.js
	|
	|------WEB-INF
		|
		|----web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.	


form.html
--------
<!DOCTYPE html>
<html>
	<head>
		<title>MyPage!</title>
		
		<!-- add external javascript  -->
		<script type="text/javascript" src="validation.js"></script>
		
	</head>
	<body>
	
		<form name="myform" action="test" method="GET" onsubmit="return validate()">
	
			Name: <input type="text" name="t1"/> <br>
	
			Age:<input type="text" name="t2"/> <br>
			
			<!--  hidden box  -->
			<input type="hidden" value="no" name="vflag"/>
			
			<input type="submit" value="submit"/>

</form>
	</body>
</html>

validation.js
-------------
function validate()
{
	
	var name=document.myform.t1.value;
	var age=document.myform.t2.value;
	document.myform.vflag.value="yes";
	
	if(name=="")
	{
		alert("Name is mandatory");
		document.myform.t1.focus();
		return false;
	}
	if(age=="")
	{
		alert("Age is mandatory");
		document.myform.t2.focus();
		return false;
	}
	else
	{
		if(isNaN(age))
		{
			alert("Age must be numeric");
			document.myform.t2.value="";
			document.myform.t2.focus();
			return false;
		}
	}
	return true;
}

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern> 
  </servlet-mapping>
 
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet 	
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		String status=req.getParameter("vflag");
		int age=0;
		
		if(status.equals("no"))
		{
			if(name=="" || name==null || name.length()==0)
			{
				pw.println("<center><h1>Name is mandatory</h1></center>");
				return;
			}
			if(sage=="" || sage==null || sage.length()==0)
			{
				pw.println("<center><h1>Age is mandatory</h1></center>");
				return;
			}
			else
			{
				try
				{
					age=Integer.parseInt(sage);
				}
				catch(NumberFormatException nfe)
				{
					pw.println("<center><h1>Age must be numeric</h1></center>");
					return;
				}
			}
		}
		
		if(status.equals("yes"))
		{
			age=Integer.parseInt(sage);
		}

		
		if(age<18)
			pw.println("<center><h1>U r not eligible to vote</h1></center>");
		else
			pw.println("<center><h1>U r eligible to vote</h1></center>");
		
		pw.close();
	}
}

Request url
---------
	http://localhost:2525/ValidationApp/


File Uploading
===============
The process of taking the file from client machine file system and storing in a server machine file system is called file uploading.

While dealing with matrimonial applications, job portal applications , profile management applications and etc. We need to upload and download a file.

There is no specific API in Servlet API to perform file uploading.

Here we need to take the support of third party API called JAVAZOOM API.

JAVAZOOM API comes with zip file and once if we extracted we will get three jar files.
ex:
	uploadbean.jar (Main jar file)
	struts.jar     (dependent jar file)
	cos.jar        (dependent jar file)

We can use file component in a form page as follow.
ex:
	<input type="file" name="f1"/>


JAVAZOOM API
=============
https://drive.google.com/file/d/1LB0WSJvSCCVOgz7xNwyuYtmy_0_TfJzq/view?usp=drive_link


Deployment Directory structure
-------------------------------
UploadApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|----FormSrv.java
|---Web Content
	|
	|----form.html
	|
	|----WEB-INF
		|
		|------web.xml
		|
		|------lib
			|
			|--uploadbean.jar
			|--struts.jar
			|--cost.jar 
Note:
-----
In above application we need to add "servlet-api.jar" and "uploadbean.jar" file in project build path.

Copy and paste javazoom jar files inside "WEB-INF/lib" folder seperately.

form.html
---------
<form action="test" method="POST" enctype="multipart/form-data">

	File1: <input type="file" name="f1"/> <br>
	
	File2: <input type="file" name="f2"/> <br>
	
	<input type="submit" value="upload"/>
</form>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>FormSrv</servlet-name>
  	<servlet-class>com.ihub.www.FormSrv</servlet-class> 
  </servlet> 
  <servlet-mapping>
  	<servlet-name>FormSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping> 
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
  
</web-app>

FormSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadBean;

public class FormSrv extends HttpServlet 
{
	protected void doPost(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//upload the files 
		try
		{
			UploadBean ub=new UploadBean();
			ub.setFolderstore("C:\\ihub");
			ub.setOverwrite(false);
			
			MultipartFormDataRequest nreq=new MultipartFormDataRequest(req);
			ub.store(nreq);
			
			pw.println("<center><h1>Files are uploaded successfully</h1></center>");
		}
		catch(Exception e)
		{
			pw.println(e);
		}
		
		pw.close();
	}
}

Request url
----------
	http://localhost:2525/UploadApp/


ServletConfig object
===================
ServletConfig is an interface which is present in javax.servlet package.

ServletConfig object is created by the web container for every Servlet.

ServletConfig object is used to read configuration information from web.xml file.

We can create ServletConfig object as follow.

ex:
	ServletConfig config=getServletConfig(); 

getInitParameter()
getInitParamaterNames()
getServletName()
getServletContext() 

Deployment Directory structure
----------------------------
ServletConfigApp 
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|----TestSrv.java
|---Web Content
	|
	|----index.html 
	|
	|----WEB-INF
		|
		|------web.xml
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

index.html
----------
<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>  
  	<init-param>
  		<param-name>driver</param-name>
  		<param-value>oracle.jdbc.driver.OracleDriver</param-value>
  	</init-param>
  	<init-param>
  		<param-name>url</param-name>
  		<param-value>jdbc:oracle:thin:@localhost:1521:XE</param-value>
  	</init-param>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping> 
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException  
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		ServletConfig config=getServletConfig();
		
		pw.println(config.getInitParameter("driver")+"<br>");
		pw.println(config.getInitParameter("url")+"<br>");
		
		Enumeration<String> e=config.getInitParameterNames();
		while(e.hasMoreElements())
		{
			String s=e.nextElement();
			pw.println(s+"<br>");
		}
		
		pw.println(config.getServletName());
		
		pw.close();
		
	}
}

Request url
----------
	http://localhost:2525/ServletConfigApp


















































































































