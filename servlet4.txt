Example application on HTML based form page to Servlet Communication
====================================================================
Diagram: servlet4.1

Deployment Directory structure
-------------------------------
VoteApp
|
|---Java Resources
	|
	|-------src
		|
		|---com.ihub.www
			|
			|---VoteSrv.java
|---Web Content
	|
	|---form.html
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

There are two methodologies to communicate with servlet program.

1) GET methodology 
-----------------
	It will carry limited amount of data.

2) POST methodology 
------------------
	It will carry unlimited amount of data.

While working with HttpServlet class , it is never recommanded to use service(-,-) method because they have not designed according HTTP protocol. It is recommanded to use doXxx(-,-) methods because they have designed according to HTTP protocol.

We have seven doXxx(-,-) methods. They are 

1) doGet(-,-)
2) doPost(-,-)
3) doPut(-,-)
4) doDelete(-,-)
5) doHead(-,-)
6) doOption(-,-)
7) doTrace(-,-)

prototype of doXxx(-,-) method
-----------------------------
protected void doGet(HttpServletRequest req,HttpServletResponse res)throws 						ServletException,IOException 
{
	
}

form.html
----------

<form  action="test" method="GET">
	
	Name: <input type="text" name="t1"/> <br>
	
	Age: <input type="text" name="t2"/> <br>
	
	<input type="submit" value="vote"/>
	
</form>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>VoteSrv</servlet-name>
  	<servlet-class>com.ihub.www.VoteSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>VoteSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>


VoteSrv.java
----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class VoteSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		
		//convert string age to int age
		int age=Integer.parseInt(sage);
		
		if(age<18)
			pw.println("<center><h1 style='color:red'>"+name+" U r not eligible to vote</h1></center>");
		else
			pw.println("<center><h1 style='color:green'>"+name+" U r eligible to vote</h1></center>");
		
		pw.close();
	}
}


Request url
-----------
	http://localhost:2525/VoteApp/

Servlet to Database Communication
=================================
Diagram: servlet4.2

Deployment Directory structure
---------------------------
DBApp
|
|--Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---DBSrv.java
|--Web Content
	|
	|---form.html
	|
	|-----WEB-INF
		|
		|-----web.xml 
		|
		|------lib
			|
			|--ojdbc14.jar
Note:
----
In above application we need to add "servlet-api.jar" and "ojdbc14.jar" file in project build path.

Copy and paste "ojdbc14.jar" file inside "WEB-INF/lib" folder seperaetly.


student table
============
drop table student;

create table student(sno number(3),sname varchar2(10),sadd varchar2(12));

form.html
---------
<form action="test" method="GET">
	
	No: <input type="text" name="t1"/> <br>
	
	Name: <input type="text" name="t2"/> <br>
	
	Address: <input type="text" name="t3"/> <br>
	
	<input type="submit" value="submit"/>

</form>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">

	<servlet>
		<servlet-name>DBSrv</servlet-name>
		<servlet-class>com.ihub.www.DBSrv</servlet-class>
	</servlet>  
	<servlet-mapping>
		<servlet-name>DBSrv</servlet-name>
		<url-pattern>/test</url-pattern>
	</servlet-mapping>
	
	<welcome-file-list>
		<welcome-file>form.html</welcome-file>
	</welcome-file-list>

</web-app>

DBSrv.java
---------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DBSrv extends HttpServlet 
{
		protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
		{
			PrintWriter pw=res.getWriter();
			res.setContentType("text/html");
			
			//reading form data 
			String sno=req.getParameter("t1");
			int no=Integer.parseInt(sno);
			
			String name=req.getParameter("t2");
			
			String add=req.getParameter("t3");
			
			//storing the data into database
			Connection con=null;
			PreparedStatement ps=null;
			int result=0;
			String qry=null;
			
			try
			{
				Class.forName("oracle.jdbc.driver.OracleDriver");
				con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
				qry="insert into student values(?,?,?)";
				ps=con.prepareStatement(qry);
				//set the values
				ps.setInt(1,no);
				ps.setString(2,name);
				ps.setString(3,add);
				
				//execute
				result=ps.executeUpdate();
				
				if(result==0)
					pw.println("<center><h1>Record Not Inserted</h1><center>");
				else
					pw.println("<center><h1>Record Inserted</h1></center>");
				
				ps.close();
				con.close();
			}
			catch(Exception e)
			{
				pw.println(e);
			}
			pw.close();
		}
}

Request url
--------
	http://localhost:2525/DBApp/


Q) What is the difference between GET and POST methodology?

GET					POST
-------					--------
It is a default methodology.		It is not a default methodology.

It sends the request fastly.		It sends the request bit slow.

It will carry limited amount of data.	It will carry unlimited amount of data.

It is not suitable for secure data.	It is suitable for secure data.

It is not suitable for encryption and	It is suitable for encryption and file uploading.
file uploading.

To process GET methodology we will 	To process POST methodology we will use doPost(-,-)
doGet(-,-) method.			method.



Servlet Life Cycle Methods
===========================
We have three life cycle methods of servlet.

1) public void init(ServletConfig config)throw ServletException 
----------------------------------------------
	It is used for intantiation event.
	This method will execute just before servlet object creation.	
 

2) public void service(ServletRequest req,ServletResponse res)throws 		ServletException,IOException 
-----------------------------------------
	It is used for request arrival event.
	This method will execute when request goes to servlets.

3) public void destroy() 
----------------------
	It is used for destruction event.
	This method will execute just before servlet object destruction.


Deployment Directory structure
------------------------------
LifeCycleApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|---TestSrv.java
|---Web Content
	|
	|---index.html
	|
	|---WEB-INF
		|
		|---web.xml

Note:
------
In above application we need to add "servlet-api.jar" file in project build path.

index.html
----------
<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern> 
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file> index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServlet;

public class TestSrv extends HttpServlet 
{
	public void init(ServletConfig cong)throws ServletException 
	{
		
	}
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		pw.println("<center><h>Service method called </h1></center>");
		pw.close();
	}
	public void destroy()
	{
		
	}
}

Request url
---------
	http://localhost:2525/LifeCycleApp/






















	




































